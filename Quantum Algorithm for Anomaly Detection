from qiskit import Aer, QuantumCircuit, transpile
from qiskit.algorithms import VQE
from qiskit.algorithms.optimizers import COBYLA
from qiskit.circuit.library import TwoLocal
from qiskit.utils import QuantumInstance

# Set up quantum simulator
backend = Aer.get_backend('statevector_simulator')

# Define the quantum circuit
def quantum_circuit():
    qc = QuantumCircuit(3)
    qc.h([0, 1, 2])  # Apply Hadamard gate
    qc.cx(0, 1)  # Apply CNOT gate
    qc.measure_all()
    return qc

# Transpile and simulate the quantum circuit
qc = quantum_circuit()
qc_compiled = transpile(qc, backend)
result = backend.run(qc_compiled).result()
counts = result.get_counts()
print(f'Quantum Circuit Result: {counts}')

# Variational Quantum Eigensolver (VQE) for optimization
ansatz = TwoLocal(rotation_blocks='ry', entanglement_blocks='cz')
vqe = VQE(ansatz, optimizer=COBYLA(), quantum_instance=QuantumInstance(backend))
result = vqe.compute_minimum_eigenvalue(operator=qc)
print(f'VQE Result: {result}')
